(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{422:function(t,r,s){"use strict";s.r(r);var a=s(2),e=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("p",[t._v("目录")]),t._v(" "),r("p"),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#字符串-api"}},[t._v("字符串 API")]),r("ul",[r("li",[r("a",{attrs:{href:"#_1、str-slice-start-end-和-str-substring-start-end"}},[t._v("1、str.slice(start [,end]) 和 str.substring(start [,end])")])]),r("li",[r("a",{attrs:{href:"#_2、str-split-delimiter-limit"}},[t._v("2、str.split(delimiter [,limit])")])]),r("li",[r("a",{attrs:{href:"#_3、str-indexof-value-from-或-str-lastindexof-value-from"}},[t._v("3、str.indexOf(value [,from]) 或 str.lastIndexOf(value [,from])")])]),r("li",[r("a",{attrs:{href:"#_4、str-concat-value"}},[t._v("4、str.concat(value)")])]),r("li",[r("a",{attrs:{href:"#_5、str-charat-index-和-str-index"}},[t._v("5、str.charAt(index) 和 str[index]")])]),r("li",[r("a",{attrs:{href:"#_6、str-trim"}},[t._v("6、str.trim()")])]),r("li",[r("a",{attrs:{href:"#_7、str-charcodeat-index"}},[t._v("7、str.charCodeAt(index)")])]),r("li",[r("a",{attrs:{href:"#_8、string-fromcharcode-c1-c2"}},[t._v("8、String.fromCharCode(c1, c2, ...)")])]),r("li",[r("a",{attrs:{href:"#_9、str-touppercase"}},[t._v("9、str.toUpperCase()")])]),r("li",[r("a",{attrs:{href:"#_10、str-tolowercase"}},[t._v("10、str.toLowerCase()")])]),r("li",[r("a",{attrs:{href:"#_11、str-search-regexp"}},[t._v("11、str.search(regexp)")])]),r("li",[r("a",{attrs:{href:"#_12、string-replace"}},[t._v("12、string.replace()")])])])])])]),r("p"),t._v(" "),r("h2",{attrs:{id:"字符串-api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串-api"}},[t._v("#")]),t._v(" 字符串 API")]),t._v(" "),r("h3",{attrs:{id:"_1、str-slice-start-end-和-str-substring-start-end"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、str-slice-start-end-和-str-substring-start-end"}},[t._v("#")]),t._v(" 1、str.slice(start [,end]) 和 str.substring(start [,end])")]),t._v(" "),r("p",[t._v("截取。")]),t._v(" "),r("p",[t._v("slice() 和 substring() 用法类似，只是slice支持负数，而substring的负数会被转换成0，然后截取0和start之间字符。")]),t._v(" "),r("p",[t._v("如果 substring() 的 start 比 end 大，这个方法将先交换两个参数的值，然后返回它们之间的子串。")]),t._v(" "),r("h3",{attrs:{id:"_2、str-split-delimiter-limit"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、str-split-delimiter-limit"}},[t._v("#")]),t._v(" 2、str.split(delimiter [,limit])")]),t._v(" "),r("p",[t._v("把字符串以分割符为界点分割成数组。")]),t._v(" "),r("p",[t._v("delimiter：分割处的字符串或正则表达式。\nlimit: 指定已返回数组的最大长度。\n如果 delimiter 为空字符串或是一个匹配空字符串的正则表达式，则字符串 str 将在每个字符之间断开。")]),t._v(" "),r("h3",{attrs:{id:"_3、str-indexof-value-from-或-str-lastindexof-value-from"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、str-indexof-value-from-或-str-lastindexof-value-from"}},[t._v("#")]),t._v(" 3、str.indexOf(value [,from]) 或 str.lastIndexOf(value [,from])")]),t._v(" "),r("p",[t._v("在指定字符串中寻找一个字符或子串。只查找第一个，找不到返回 -1。")]),t._v(" "),r("h3",{attrs:{id:"_4、str-concat-value"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、str-concat-value"}},[t._v("#")]),t._v(" 4、str.concat(value)")]),t._v(" "),r("p",[t._v("把value拼接到str上，推荐使用 str + value 代替。")]),t._v(" "),r("h3",{attrs:{id:"_5、str-charat-index-和-str-index"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、str-charat-index-和-str-index"}},[t._v("#")]),t._v(" 5、str.charAt(index) 和 str[index]")]),t._v(" "),r("p",[t._v("获取指定位置字符。")]),t._v(" "),r("h3",{attrs:{id:"_6、str-trim"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、str-trim"}},[t._v("#")]),t._v(" 6、str.trim()")]),t._v(" "),r("p",[t._v("去掉字符串前后空格。")]),t._v(" "),r("h3",{attrs:{id:"_7、str-charcodeat-index"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、str-charcodeat-index"}},[t._v("#")]),t._v(" 7、str.charCodeAt(index)")]),t._v(" "),r("p",[t._v("指定位置的字符转ASCII码（返回的是一个整数，值在 0~65535 之间，注意不是转成 Unicode）。转成 Unicode 方法请看这里")]),t._v(" "),r("p",[t._v("如果 index 为负数或大于等于字符串的长度，则 charCodeAt() 将返回 NaN。")]),t._v(" "),r("h3",{attrs:{id:"_8、string-fromcharcode-c1-c2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8、string-fromcharcode-c1-c2"}},[t._v("#")]),t._v(" 8、String.fromCharCode(c1, c2, ...)")]),t._v(" "),r("p",[t._v("跟 str.charCodeAt() 相反的操作，把 ASCII码 转成字符串。")]),t._v(" "),r("p",[t._v("String.fromCharCode(104, 101, 108, 108, 111);")]),t._v(" "),r("h3",{attrs:{id:"_9、str-touppercase"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9、str-touppercase"}},[t._v("#")]),t._v(" 9、str.toUpperCase()")]),t._v(" "),r("p",[t._v("转成大写。")]),t._v(" "),r("h3",{attrs:{id:"_10、str-tolowercase"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10、str-tolowercase"}},[t._v("#")]),t._v(" 10、str.toLowerCase()")]),t._v(" "),r("p",[t._v("转成小写。")]),t._v(" "),r("h3",{attrs:{id:"_11、str-search-regexp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11、str-search-regexp"}},[t._v("#")]),t._v(" 11、str.search(regexp)")]),t._v(" "),r("p",[t._v("查找。返回第一个匹配 regexp 的子串的开始位置，如果没找到返回-1。")]),t._v(" "),r("p",[t._v("search() 不执行全局匹配，它会忽略“g”属性，也会忽略 regexp 的 lastIndex 属性，总是从 string 的开始位置开始搜索，这意味着它总是返回第一个匹配子串的位置。")]),t._v(" "),r("h3",{attrs:{id:"_12、string-replace"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12、string-replace"}},[t._v("#")]),t._v(" 12、string.replace()")])])}),[],!1,null,null,null);r.default=e.exports}}]);