(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{419:function(a,r,e){"use strict";e.r(r);var s=e(2),t=Object(s.a)({},(function(){var a=this,r=a._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("p",[a._v("目 录\n")]),r("div",{staticClass:"table-of-contents"},[r("ul",[r("li",[r("a",{attrs:{href:"#数组api"}},[a._v("数组API")]),r("ul",[r("li",[r("a",{attrs:{href:"#数组原型方法主要有以下这些"}},[a._v("数组原型方法主要有以下这些：")])]),r("li",[r("a",{attrs:{href:"#各个方法的基本功能详解"}},[a._v("各个方法的基本功能详解")])])])])])]),r("p"),a._v(" "),r("h2",{attrs:{id:"数组api"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组api"}},[a._v("#")]),a._v(" 数组API")]),a._v(" "),r("h3",{attrs:{id:"数组原型方法主要有以下这些"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数组原型方法主要有以下这些"}},[a._v("#")]),a._v(" 数组原型方法主要有以下这些：")]),a._v(" "),r("ul",[r("li",[a._v("join()：用指定的分隔符将数组每一项拼接为字符串")]),a._v(" "),r("li",[a._v("push()：向数组的末尾添加新元素")]),a._v(" "),r("li",[a._v("pop()：删除数组的最后一项")]),a._v(" "),r("li",[a._v("unshift()：向数组首位添加新元素")]),a._v(" "),r("li",[a._v("shift()：删除数组的第一项")]),a._v(" "),r("li",[a._v("slice()：按照条件查找出其中的部分元素")]),a._v(" "),r("li",[a._v("splice()：对数组进行增删改")]),a._v(" "),r("li",[a._v("filter()：过滤功能")]),a._v(" "),r("li",[a._v("concat()：用于连接两个或多个数组")]),a._v(" "),r("li",[a._v("indexOf()：检测当前值在数组中第一次出现的位置索引")]),a._v(" "),r("li",[a._v("lastIndexOf()：检测当前值在数组中最后一次出现的位置索引")]),a._v(" "),r("li",[a._v("every()：判断数组中每一项都是否满足条件")]),a._v(" "),r("li",[a._v("some()：判断数组中是否存在满足条件的项")]),a._v(" "),r("li",[a._v("includes()：判断一个数组是否包含一个指定的值")]),a._v(" "),r("li",[a._v("sort()：对数组的元素进行排序")]),a._v(" "),r("li",[a._v("reverse()：对数组进行倒序")]),a._v(" "),r("li",[a._v("forEach()：es5及以下循环遍历数组每一项")]),a._v(" "),r("li",[a._v("map()：es6循环遍历数组每一项")]),a._v(" "),r("li",[a._v("find()：返回匹配的项")]),a._v(" "),r("li",[a._v("findIndex()：返回匹配位置的索引")]),a._v(" "),r("li",[a._v("reduce()：从数组的第一项开始遍历到最后一项，返回一个最终的值")]),a._v(" "),r("li",[a._v("reduceRight()：从数组的最后一项开始遍历到第一项，返回一个最终的值")]),a._v(" "),r("li",[a._v("toLocaleString()、toString()：将数组转换为字符串")]),a._v(" "),r("li",[a._v("entries()、keys()、values()：遍历数组")])]),a._v(" "),r("h3",{attrs:{id:"各个方法的基本功能详解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#各个方法的基本功能详解"}},[a._v("#")]),a._v(" "),r("strong",[a._v("各个方法的基本功能详解")])]),a._v(" "),r("h4",{attrs:{id:"_1、join"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、join"}},[a._v("#")]),a._v(" 1、join()")]),a._v(" "),r("p",[a._v("join()方法用于把数组中的所有元素转换一个字符串，默认使用逗号作为分隔符")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = [1,2,3];\nconsole.log(arr1.join());   // 1,2,3\nconsole.log(arr.join('-'));   // 1-2-3\nconsole.log(arr);   // [1,2,3](原数组不变)\n")])])]),r("h4",{attrs:{id:"_2、push-和pop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、push-和pop"}},[a._v("#")]),a._v(" 2、push()和pop()")]),a._v(" "),r("p",[a._v("push()方法从数组末尾向数组添加元素，可以添加一个或多个元素,并返回新的长度\npop()方法用于删除数组的最后一个元素并返回删除的元素")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = ['lily','lucy','Tom'];\nvar count = arr1.push('Jack','Sean');\nconsole.log(count);   // 5\nconsole.log(arr1);   // ['lily','lucy','Tom','Jack','Sean']\n\nvar item = arr1.pop();\nconsole.log(item);   // Sean\nconsole.log(arr1);   // ['lily','lucy','Tom','Jack']\n")])])]),r("h4",{attrs:{id:"_3、unshift-和shift"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、unshift-和shift"}},[a._v("#")]),a._v(" "),r("strong",[a._v("3、unshift()和shift()")])]),a._v(" "),r("p",[a._v("unshift()方法可向数组的开头添加一个或更多元素，并返回新的长度\nshift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = ['lily','lucy','Tom'];\nvar count = arr1.unshift('Jack','Sean');\nconsole.log(count);   // 5\nconsole.log(arr1);   // ['Jack','Sean','lily','lucy','Tom']\n\nvar item = arr1.shift();\nconsole.log(item);   // Jack\nconsole.log(arr1);   // [''Sean','lily','lucy','Tom']\n")])])]),r("h4",{attrs:{id:"_4、sort"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、sort"}},[a._v("#")]),a._v(" "),r("strong",[a._v("4、sort()")])]),a._v(" "),r("p",[a._v("用于对数组的元素进行排序。排序顺序可以是字母或数字，并按升序或降序，默认排序顺序为按字母升序")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = ['a','d','c','b'];\nconsole.log(arr1.sort());   // ['a','b','c','d']\n\nfunction compare(value1,value2){\n     if(value1 < value2){\n          return -1;\n     }else if(value1 > value2){\n          return 1;\n     }else{\n          return 0;\n     }\n}\n\nvar arr2 = [13,24,51,3];\nconsole.log(arr2.sort(compare));   // [3,13,24,51]\n\n// 如果需要通过比较函数产生降序排序的结果，只要交后比较函数返回的值即可\n")])])]),r("h4",{attrs:{id:"_5、reverse"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、reverse"}},[a._v("#")]),a._v(" "),r("strong",[a._v("5、reverse()")])]),a._v(" "),r("p",[a._v("用于颠倒数组中元素的顺序，原数组改变")]),a._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" arr1 "),r("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("13")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("24")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("51")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),r("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nconsole"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("arr1"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("reverse")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("   "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// [3,51,24,13]")]),a._v("\nconsole"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("arr1"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("   "),r("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// [3,51,24,13](原数组改变)")]),a._v("\n")])])]),r("h4",{attrs:{id:"_6、concat"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、concat"}},[a._v("#")]),a._v(" 6、concat()")]),a._v(" "),r("p",[a._v("用于连接两个或多个数组，该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = [1,3,5,7];\nvar arrCopy = arr1.concat(9,[11,13]);\nconsole.log(arrCopy);   // [1,3,5,7,9,11,13]\nconsole.log(arr1);   // [1,3,5,7](原数组未被修改)\n")])])]),r("h4",{attrs:{id:"_7、slice"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、slice"}},[a._v("#")]),a._v(" "),r("strong",[a._v("7、slice()")])]),a._v(" "),r("p",[a._v("返回从原数组中指定开始下标到结束下标之间的项组成的新数组，可以接受一或两个参数，即要返回项的起始和结束位置(不包括结束位置的项)")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v(" 用法：array.slice(start,end)\n 解释：该方法是对数组进行部分截取，并返回一个数组副本；参数start是截取的开始数组索引，end参数等于你要取的最后一个字符的位置值加上1（可选）\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = [1,3,5,7,9,11];\nvar arrCopy = arr1.slice(1);\nvar arrCopy2 = arr1.slice(1,4);\nvar arrCopy3 = arr1.slice(1,-2);   // 相当于arr1.slice(1,4);\nvar arrCopy4 = arr1.slice(-4,-1);   // 相当于arr1.slice(2,5);\nconsole.log(arr1);   // [1,3,5,7,9,11](原数组没变)\nconsole.log(arrCopy);   // [3,5,7,9,11]\nconsole.log(arrCopy2);   // [3,5,7]\nconsole.log(arrCopy3);   // [3,5,7]\nconsole.log(arrCopy4);   // [5,7,9]\n\n//如果不传入参数二，那么将从参数一的索引位置开始截取，一直到数组尾\nvar a=[1,2,3,4,5,6];\nvar b=a.slice(0,3);    //[1,2,3]\nvar c=a.slice(3);       //[4,5,6]\n \n//如果两个参数中的任何一个是负数，array.length会和它们相加，试图让它们成为非负数，举例说明：\n//当只传入一个参数，且是负数时，length会与参数相加，然后再截取\nvar a=[1,2,3,4,5,6];\nvar b=a.slice(-1);    //[6]\n \n//当只传入一个参数，是负数时,并且参数的绝对值大于数组length时，会截取整个数组\nvar a=[1,2,3,4,5,6];\nvar b=a.slice(-6);    //[1,2,3,4,5,6]\nvar c=a.slice(-8);    //[1,2,3,4,5,6]\n \n//当传入两个参数一正一负时，length也会先于负数相加后，再截取\nvar a=[1,2,3,4,5,6];\nvar b=a.slice(2,-3);    //[3]\n \n//当传入一个参数，大于length时，将返回一个空数组\nvar a=[1,2,3,4,5,6];\nvar b=a.slice(6);　　//[]\n")])])]),r("h4",{attrs:{id:"_8、splice"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8、splice"}},[a._v("#")]),a._v(" "),r("strong",[a._v("8、splice()")])]),a._v(" "),r("p",[a._v("可以实现删除、插入和替换")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("用法：array.splice(start,deleteCount,item...)\n解释：splice方法从array中移除一个或多个数组，并用新的item替换它们。参数start是从数组array中移除元素的开始位置。参数deleteCount是要移除的元素的个数。\n\n如果有额外的参数，那么item会插入到被移除元素的位置上。它返回一个包含被移除元素的数组。\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("//替换\nvar a=['a','b','c'];\nvar b=a.splice(1,1,'e','f');    //a=['a','e','f','c'],b=['b']\n\n//删除\nvar arr1 = [1,3,5,7,9,11];\nvar arrRemoved = arr1.splice(0,2);\nconsole.log(arr1);   // [5,7,9,11]\nconsole.log(arrRemoved);   // [1,3]\n\n// 添加元素\nvar arr1 = [22,3,31,12];\narr1.splice(1,0,12,35);\nconsole.log(arr1);   // [22,12,35,3,31,12]\n")])])]),r("h4",{attrs:{id:"_9、foreach"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9、foreach"}},[a._v("#")]),a._v(" "),r("strong",[a._v("9、forEach()")])]),a._v(" "),r("p",[a._v("forEach方法中的function回调有三个参数： 第一个参数是遍历的数组内容， 第二个参数是对应的数组索引， 第三个参数是数组本身")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr = [1,2,3,4];\nvar sum =0;\narr.forEach(function(value,index,array){\n\n array[index] == value; //结果为true\n\n sum+=value; \n\n });\n\nconsole.log(sum); //结果为 10\n\n")])])]),r("h4",{attrs:{id:"_10、map"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10、map"}},[a._v("#")]),a._v(" "),r("strong",[a._v("10、map()")])]),a._v(" "),r("p",[a._v("返回一个新数组，会按照原始数组元素顺序依次处理元素")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("let array = [1, 2, 3, 4, 5];\n\nlet newArray = array.map((item) => {\n    return item * item;\n})\n\nconsole.log(newArray)  // [1, 4, 9, 16, 25]\n")])])]),r("h4",{attrs:{id:"_11、every"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11、every"}},[a._v("#")]),a._v(" "),r("strong",[a._v("11、every()")])]),a._v(" "),r("p",[a._v("判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = [1,2,3,4,5];\nvar arr2 = arr1.every.every(x => {\n     return x < 10;\n});\nconsole.log(arr2);   // true\n\nvar arr3 = arr1.every(x => {\n     return x < 3;\n});\nconsole.log(arr3);   // false\n")])])]),r("h4",{attrs:{id:"_12、some"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_12、some"}},[a._v("#")]),a._v(" "),r("strong",[a._v("12、some()")])]),a._v(" "),r("p",[a._v("判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = [1,2,3,4,5];\nvar arr2 = arr1.some(x => {\n     return x < 3;\n});\nconsole.log(arr2);   // true\n\nvar arr3 = arr1.some(x => {\n     return x < 1;\n});\nconsole.log(arr3);   // false\n\n")])])]),r("h4",{attrs:{id:"_13、includes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_13、includes"}},[a._v("#")]),a._v(" "),r("strong",[a._v("13、includes()")])]),a._v(" "),r("p",[a._v("es7新增，用来判断一个数组、字符串是否包含一个指定的值，使用===运算符来进行值比较，如果是返回true，否则false，参数有两个，第一个是(必填)需要查找的元素值，第二个是(可选)开始查找元素的位置")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = [22,3,31,12,58];\nvar includes = arr1.includes(31);\nconsole.log(includes);   // true\n\nvar includes2 = arr1.includes(31,3);   // 从索引3开始查找31是否存在\nconsole.log(includes2);   // false\n\n")])])]),r("h4",{attrs:{id:"_14、reduce-和reduceright"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_14、reduce-和reduceright"}},[a._v("#")]),a._v(" "),r("strong",[a._v("14、reduce()和reduceRight()")])]),a._v(" "),r("p",[a._v("都会实现迭代数组的所有项(即累加器)，然后构建一个最终返回的值")]),a._v(" "),r("p",[a._v("reduce()方法从数组的第一项开始，逐个遍历到最后")]),a._v(" "),r("p",[a._v("reduceRight()方法从数组的最后一项开始。向前遍历到第一项")]),a._v(" "),r("p",[a._v("4个参数：前一个值、当前值、项的索引和数组对象")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = [1,2,3,4,5];\nvar sum = arr1.reduce((prev,cur,index,array) => {\n     return prev + cur;\n},10);   // 数组一开始加了一个初始值10，可以不设默认0\nconsole.log(sum);   // 25\n\n")])])]),r("h4",{attrs:{id:"_15、tolocalestring-和tostring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_15、tolocalestring-和tostring"}},[a._v("#")]),a._v(" "),r("strong",[a._v("15、toLocaleString()和toString()")])]),a._v(" "),r("p",[a._v("都是将数组转换为字符串")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("var arr1 = [22,3,31,12];\nlet str = arr1.toLocaleString();\nvar str2 = arr1.toString();\n\nconsole.log(str);   // 22,3,31,12\nconsole.log(str2);   // 22,3,31,12\n\n")])])]),r("h4",{attrs:{id:"_16、find-和findindex"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_16、find-和findindex"}},[a._v("#")]),a._v(" "),r("strong",[a._v("16、find()和findIndex()")])]),a._v(" "),r("p",[a._v("都接受两个参数：一个回调函数，一个可选值用于指定回调函数内部的this")]),a._v(" "),r("p",[a._v("该回调函数可接受3个参数：数组的某个元素、该元素对应的索引位置、数组本身，在回调函数第一次返回true时停止查找。")]),a._v(" "),r("p",[a._v("二者的区别是：find()方法返回匹配的值，而findIndex()方法返回匹配位置的索引")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("let arr = [1,2,3,4,5];\nlet num = arr.find(item => item > 1);\nconsole.log(num) // 2\n\nlet arr = [1,2,3,4,5];\nlet num = arr.findIndex(item => item > 1);\nconsole.log(num) // 1\n\n")])])]),r("h4",{attrs:{id:"_17、entries-、keys-和values"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_17、entries-、keys-和values"}},[a._v("#")]),a._v(" "),r("strong",[a._v("17、entries()、keys()和values()")])]),a._v(" "),r("p",[a._v("es6新增\nentries()、keys()和values()--用于遍历数组。它们都返回一个遍历器对象，可以用for...of循环进行遍历")]),a._v(" "),r("p",[a._v("区别是keys()是对键名的遍历、values()是对键值的遍历、entries()是对键值对的遍历")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("for(let index of [a,b].keys()){\n     console.log(index);\n}\n// 0\n// 1\n\nfor(let elem of [a,b].values()){\n     console.log(elem);\n}\n// a\n// b\n\nfor(let [index,elem] of [a,b].entries()){\n     console.log(index,elem);\n}\n// 0 'a'\n// 1 'b'\n\n")])])]),r("p",[a._v("如果不使用for…of循环，可以手动调用遍历器对象的next方法，进行遍历")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("let arr1 = [a,b,c];\nlet entries = arrr1.entries();\nconsole.log(entries.next().value);   // [0,a]\nconsole.log(entries.next().value);   // [1,b]\nconsole.log(entries.next().value);   // [2,c]\n")])])]),r("h4",{attrs:{id:"_18、indexof"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_18、indexof"}},[a._v("#")]),a._v(" "),r("strong",[a._v("18、indexOf()")])]),a._v(" "),r("p",[a._v("indexof方法可以在字符串和数组上使用。\nindexOf() 方法可返回某个指定的字符串值在字符串、数组中首次出现的位置。")]),a._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[a._v("    arr = ['mfg', '2017', '2016'];\n\nconsole.log(arr.indexOf('mfg')); // 0\nconsole.log(arr.indexOf('m')); // -1\nconsole.log(arr.indexOf('2017'));// 1\nconsole.log(arr.indexOf(2017)); // -1，这里不会做隐式类型转换\n")])])])])}),[],!1,null,null,null);r.default=t.exports}}]);